name: 🚀 HealthTrack Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ejecutar pruebas nocturnas a las 2 AM UTC
    - cron: '0 2 * * *'

# Permisos necesarios para el pipeline completo
permissions:
  contents: read
  security-events: write
  actions: read
  checks: write          # Para test reports
  pull-requests: write   # Para comentarios en PRs

env:
  JAVA_VERSION: '17'  # Actualizado a Java 17
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository

jobs:
  # =====================================
  # JOB 1: PRUEBAS UNITARIAS
  # =====================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for SonarCloud
        
    - name: ☕ Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 📦 Cache Maven Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.m2/repository
          .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: 🧪 Run Unit Tests
      run: |
        mvn clean test -Dtest=UsuarioTest -Dmaven.test.failure.ignore=true
        
    - name: 📊 Generate Code Coverage Report
      run: mvn jacoco:report
      
    - name: 📤 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          target/surefire-reports/
          target/site/jacoco/
          
    - name: 📋 Publish Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Unit Tests Results
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: false    # No fallar si no encuentra archivos
        fail-on-empty: false    # No fallar si está vacío
        
    - name: 💾 Cache Test Results for SonarCloud
      uses: actions/cache@v4
      with:
        path: |
          target/surefire-reports/
          target/site/jacoco/
        key: test-results-${{ github.run_id }}

  # =====================================
  # JOB 2: PRUEBAS SELENIUM
  # =====================================
  selenium-tests:
    name: 🌐 Selenium Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ☕ Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 📦 Restore Maven Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.m2/repository
          .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        
    - name: 🌐 Setup Chrome Browser
      uses: browser-actions/setup-chrome@latest
      
    - name: 🌐 Run Selenium Tests
      run: |
        mvn test -Dtest=UsuarioSeleniumTest -Dmaven.test.failure.ignore=true
        
    - name: 📸 Upload Screenshots (on failure)
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: selenium-screenshots
        path: target/screenshots/
        
    - name: 📤 Upload Selenium Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: selenium-test-results
        path: target/surefire-reports/

  # =====================================
  # JOB 3: PRUEBAS DE RENDIMIENTO
  # =====================================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ☕ Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 📦 Restore Maven Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.m2/repository
          .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        
    - name: ⚡ Run Java Performance Tests
      run: |
        mvn test -Dtest=UsuarioPerformanceTest -Dmaven.test.failure.ignore=true
        
    - name: 🐳 Setup Docker for JMeter
      uses: docker/setup-buildx-action@v3
      
    - name: 🏃‍♂️ Run JMeter Performance Tests
      run: |
        mkdir -p target/jmeter
        docker run --rm \
          -v ${{ github.workspace }}/src/test/jmeter:/jmeter \
          -v ${{ github.workspace }}/target/jmeter:/results \
          justb4/jmeter:latest \
          -n -t /jmeter/healthtrack-performance.jmx \
          -l /results/results.jtl \
          -e -o /results/html-report
          
    - name: 📊 Upload JMeter Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: jmeter-results
        path: |
          target/jmeter/results.jtl
          target/jmeter/html-report/
          
    - name: 📈 Upload Performance Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: target/surefire-reports/

  # =====================================
  # JOB 4: ANÁLISIS SONARCLOUD
  # =====================================
  sonarcloud-analysis:
    name: 🔍 SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, selenium-tests, performance-tests]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Disable shallow clone for better analysis
        
    - name: ☕ Setup Java JDK for SonarCloud
      uses: actions/setup-java@v4
      with:
        java-version: '17'  # Java 17 solo para SonarCloud
        distribution: 'temurin'
        
    - name: 📦 Cache SonarCloud Packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: 📦 Restore Maven Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.m2/repository
          .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        
    # ✅ DESPUÉS (corregido):
    - name: 🧪 Generate Fresh Coverage Data
      run: |
        mvn clean test jacoco:report -Dmaven.test.failure.ignore=true
        
    - name: 📊 COMPLETE Coverage Debug for SonarCloud
      run: |
        echo "🔍 COMPREHENSIVE COVERAGE DEBUG"
        echo "==============================="
        
        echo "1. 📁 Generated files:"
        find target -name "*jacoco*" -type f
        
        echo ""
        echo "2. 📄 JaCoCo XML Report analysis:"
        if [ -f "target/site/jacoco/jacoco.xml" ]; then
          echo "✅ jacoco.xml exists: $(ls -lh target/site/jacoco/jacoco.xml)"
          echo ""
          echo "📋 XML Headers:"
          head -10 target/site/jacoco/jacoco.xml
          
          echo ""
          echo "🔍 Coverage counters found:"
          grep -E '<counter type="(INSTRUCTION|LINE|BRANCH)"' target/site/jacoco/jacoco.xml
          
          echo ""
          echo "📊 Package information:"
          grep '<package name=' target/site/jacoco/jacoco.xml
          
          echo ""
          echo "👤 Classes with coverage:"
          grep '<class name=' target/site/jacoco/jacoco.xml
          
          echo ""
          echo "🎯 Specific search for Usuario class:"
          grep -A 5 -B 5 'Usuario' target/site/jacoco/jacoco.xml || echo "Usuario class not found in coverage"
          
          echo ""
          echo "📈 Coverage summary from XML:"
          # Buscar el total de coverage
          grep -A 1 '</report>' target/site/jacoco/jacoco.xml | head -5
          
        else
          echo "❌ jacoco.xml NOT found"
        fi
        
        echo ""
        echo "3. 📁 Complete target structure:"
        ls -la target/
        ls -la target/site/ 2>/dev/null || echo "No site directory"
        ls -la target/site/jacoco/ 2>/dev/null || echo "No jacoco directory"
        
        echo ""
        echo "4. 🧪 Test classes verification:"
        find target/test-classes -name "*.class" | head -5
        
        echo ""
        echo "5. 🏗️ Main classes verification:"
        find target/classes -name "*.class" | head -5
            
    - name: 🔧 Format JaCoCo XML for SonarCloud
      run: |
        echo "🔧 Formatting JaCoCo XML for better SonarCloud compatibility..."
        
        # Verificar que existe
        if [ -f "target/site/jacoco/jacoco.xml" ]; then
          echo "✅ Original XML size: $(du -h target/site/jacoco/jacoco.xml)"
          
          # Hacer backup
          cp target/site/jacoco/jacoco.xml target/site/jacoco/jacoco.xml.backup
          
          # Formatear XML (si xmllint está disponible)
          if command -v xmllint >/dev/null 2>&1; then
            xmllint --format target/site/jacoco/jacoco.xml.backup > target/site/jacoco/jacoco.xml
            echo "✅ XML formatted with xmllint"
          else
            echo "ℹ️  xmllint not available, using original XML"
          fi
          
          echo "✅ Final XML size: $(du -h target/site/jacoco/jacoco.xml)"
        else
          echo "❌ JaCoCo XML not found"
          exit 1
        fi

    - name: 🔍 Run SonarCloud Analysis (With Explicit Coverage)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        echo "🔍 Starting SonarCloud analysis with verified coverage data..."
        
        # Verificar prerequisites
        echo "📊 Coverage verification:"
        echo "   JaCoCo XML exists: $([ -f 'target/site/jacoco/jacoco.xml' ] && echo 'YES' || echo 'NO')"
        echo "   XML file size: $(du -h target/site/jacoco/jacoco.xml 2>/dev/null || echo 'NOT FOUND')"
        echo "   Classes in XML: $(grep -c 'class name=' target/site/jacoco/jacoco.xml 2>/dev/null || echo '0')"
        
        # Ejecutar SonarCloud con paths absolutos
        mvn sonar:sonar \
          -Dsonar.projectKey=she-rand_healthtrack \
          -Dsonar.organization=she-rand \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.token="${SONAR_TOKEN}" \
          -Dsonar.sources=src/main/java \
          -Dsonar.tests=src/test/java \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.java.test.binaries=target/test-classes \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.junit.reportPaths=target/surefire-reports \
          -Dsonar.java.source=11 \
          -Dsonar.verbose=true
        
        echo "✅ SonarCloud analysis completed"

        - name: 🔍 Quick XML Coverage Check
          run: |
            echo "🔍 QUICK COVERAGE CHECK"
            echo "======================"
            
            if [ -f "target/site/jacoco/jacoco.xml" ]; then
              echo "✅ XML file exists"
              
              # Contar líneas con coverage data
              COVERAGE_LINES=$(grep -c 'covered="[1-9]' target/site/jacoco/jacoco.xml || echo "0")
              echo "📊 Lines with coverage > 0: $COVERAGE_LINES"
              
              # Buscar el total de instrucciones
              TOTAL_INSTRUCTIONS=$(grep 'type="INSTRUCTION"' target/site/jacoco/jacoco.xml | head -1)
              echo "📈 Instruction coverage: $TOTAL_INSTRUCTIONS"
              
              # Verificar si hay datos de la clase Usuario
              USER_CLASS=$(grep -c 'class name="com/ejemplo/Usuario"' target/site/jacoco/jacoco.xml || echo "0")
              echo "👤 Usuario class found: $([ $USER_CLASS -gt 0 ] && echo 'YES' || echo 'NO')"
              
              # Mostrar tamaño del archivo
              echo "📄 XML file size: $(du -h target/site/jacoco/jacoco.xml)"
              
            else
              echo "❌ No XML file found"
            fi
          
        - name: 🔧 Verify SonarCloud Configuration
          run: |
            echo "🔧 SONARCLOUD CONFIGURATION CHECK"
            echo "================================="
            
            echo "📋 sonar-project.properties content:"
            cat sonar-project.properties
            
            echo ""
            echo "🎯 Key paths verification:"
            echo "Sources exist: $([ -d 'src/main/java' ] && echo 'YES' || echo 'NO')"
            echo "Tests exist: $([ -d 'src/test/java' ] && echo 'YES' || echo 'NO')"
            echo "JaCoCo XML exists: $([ -f 'target/site/jacoco/jacoco.xml' ] && echo 'YES' || echo 'NO')"
            echo "Surefire reports exist: $([ -d 'target/surefire-reports' ] && echo 'YES' || echo 'NO')"
            
            echo ""
            echo "🔍 Environment variables:"
            echo "SONAR_TOKEN: $([ ! -z '$SONAR_TOKEN' ] && echo 'SET' || echo 'NOT SET')"
            echo "GITHUB_TOKEN: $([ ! -z '$GITHUB_TOKEN' ] && echo 'SET' || echo 'NOT SET')"

  # =====================================
  # JOB 5: SECURITY SCAN
  # =====================================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🛡️ Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📤 Upload Trivy Scan Results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-scan'

  # =====================================
  # JOB 6: BUILD Y PACKAGE
  # =====================================
  build-and-package:
    name: 📦 Build & Package
    runs-on: ubuntu-latest
    needs: [sonarcloud-analysis, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ☕ Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 📦 Restore Maven Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.m2/repository
          .m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        
    - name: 🏗️ Build Application
      run: mvn clean package -DskipTests
      
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifacts
        path: target/*.jar

  # =====================================
  # JOB 7: DEPLOY TO STAGING
  # =====================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-package
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifacts
        path: ./artifacts
        
    - name: 🚀 Deploy to Staging Environment
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "📦 Artifact: $(ls ./artifacts/)"
        echo "🌐 Staging URL: https://staging.healthtrack.com"
        echo "✅ Staging deployment completed!"
        
    - name: 🧪 Run Staging Smoke Tests
      run: |
        echo "🧪 Running smoke tests on staging..."
        # curl -f https://staging.healthtrack.com/health
        echo "✅ Smoke tests passed!"

  # =====================================
  # JOB 8: DEPLOY TO PRODUCTION
  # =====================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-package
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifacts
        path: ./artifacts
        
    - name: 🌟 Deploy to Production Environment
      run: |
        echo "🌟 Deploying to production environment..."
        echo "📦 Artifact: $(ls ./artifacts/)"
        echo "🌐 Production URL: https://healthtrack.com"
        echo "✅ Production deployment completed!"
        
    - name: 🧪 Run Production Smoke Tests
      run: |
        echo "🧪 Running smoke tests on production..."
        # curl -f https://healthtrack.com/health
        echo "✅ Smoke tests passed!"

  # =====================================
  # JOB 9: NOTIFICATIONS
  # =====================================
  notifications:
    name: 📧 Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 📊 Generate Pipeline Summary
      run: |
        echo "## 📊 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Selenium Tests | ${{ needs.selenium-tests.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Tests | ${{ needs.performance-tests.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| SonarCloud Analysis | ${{ needs.sonarcloud-analysis.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Package | ${{ needs.build-and-package.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Deploy Staging | ${{ needs.deploy-staging.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Deploy Production | ${{ needs.deploy-production.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
        
    - name: 📧 Send Success Notification
      if: ${{ needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success' }}
      run: |
        echo "✅ Deployment successful!"
        echo "📧 Sending success notification..."
        
    - name: 📧 Send Failure Notification
      if: failure()
      run: |
        echo "❌ Pipeline failed!"
        echo "📧 Sending failure notification..."